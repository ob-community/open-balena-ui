name: CI

on:
  # Do not build 3rd party package updates automatically to avoid some hacked package stealing secrets https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
  push:
    branches-ignore:
      - 'renovate/3rd-party**'
      - 'dependabot/**'
  pull_request:
    branches-ignore:
      - 'renovate/3rd-party**'
      - 'dependabot/**'

env:
  IMAGE_NAME: obcommunity/open-balena-ui
  BASE_VERSION: '0.1.0' # Where action-vtl starts if there are no existing tags
  NODE_VERSION: 20 # Match the Dockerfile version

jobs:
  # Sanity checks: Lint, test, and build the project
  build-test:
    name: Lint, Test, and Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name != 'pull_request'
        uses: mapped/action-vtl@latest
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Project dependencies
        run: npm ci

      - name: Linting
        if: false # ESLint needs added to dev-dependencies and configured properly...
        run: npm run lint

      - name: Testing
        if: false # Jest (or similar) needs added to dev-dependencies and configured properly...
        run: npm run test

      - name: Build
        run: npm run build

  # Build the docker container in all branches (without pushing)
  build-docker:
    name: Build for docker
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        if: github.event.pull_request.head.repo.full_name == github.repository || github.event_name != 'pull_request'
        uses: mapped/action-vtl@latest
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerImage: ${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          provenance: false
          file: ./Dockerfile
          push: false
          tags: ${{ steps.vtl.outputs.docker_dtag || format('{0}:{1}', github.event.pull_request.head.repo.full_name, github.event.pull_request.number) }}
          labels: ${{ steps.vtl.outputs.oci_labels || 'org.opencontainers.image.title=open-balena-ui' }}

  # Build and push the docker container to Docker Hub for everything **except PRs**
  # main gets "latest" tag, all other branches get branch name tag and "prerelease" in the version
  # see: https://github.com/mapped/action-vtl?tab=readme-ov-file#docker-tags
  push-to-docker-hub:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: build-docker
    if: ${{ !startsWith(github.ref, 'refs/pull/') }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@latest
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerImage: ${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          provenance: mode=max
          sbom: true
          file: ./Dockerfile
          push: ${{ steps.vtl.outputs.docker_push }}
          tags: ${{ steps.vtl.outputs.docker_tags }}
          labels: ${{ steps.vtl.outputs.oci_labels }}

      - name: Update package.json version
        run: |
          VERSION="${{ steps.vtl.outputs.ver_tag }}"
          VERSION_NO_V="${VERSION#v}"
          jq --arg v "$VERSION_NO_V" '.version = $v' package.json > tmp.json && mv tmp.json package.json

      - name: Commit updated package.json
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add -f package.json
          git commit -m "chore: update package.json version [skip CI]"
          git push origin HEAD
